package com.example.jpa.controller;

import com.example.jpa.model.Visitor;
import com.example.jpa.repository.VisitorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@CrossOrigin(origins = "*", maxAge = 3600)@RestController()
@RequestMapping(path = "/visitors")
public class VisitorController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private VisitorRepository visitorRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Visitor> getAllVisitors() {
        // This returns a JSON or XML with the users
        return visitorRepository.findAll();
    }

    @PostMapping("/add")
    public ResponseEntity<Visitor> createVisitor(@RequestBody Visitor visitor) {
        try {
            Visitor _visitor = visitorRepository
                    .save(new Visitor( visitor.getA_name(), visitor.getB_email(), visitor.getC_player(), visitor.getD_viewer()
                            , visitor.getE_gamertag(), visitor.getF_formulaOne(), visitor.getG_valorant(), visitor.getH_fifa(),
                            visitor.getJ_teamPlayer(), visitor.getI_soloPlayer(),
                            visitor.getPlayerTwo(), visitor.getPlayerThree(), visitor.getPlayerFour(), visitor.getPlayerFive(), visitor.getK_teamName()) );
            return new ResponseEntity<>(_visitor, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping(path="/del/{id}")
    public @ResponseBody String deleteVisitor(@PathVariable int id) {
        visitorRepository.delete(visitorRepository.findById(id).get());
        return "Visitor deleted";
    }

    @PatchMapping(path="/update")
    public @ResponseBody String updateVisitor(@RequestParam int id, @RequestParam(value = "name", required = false) String name
            , @RequestParam(value = "email", required = false) String email,
    @RequestParam(value = "player", required = false) Boolean player,
                                              @RequestParam(value = "viewer", required = false) Boolean viewer
            , @RequestParam(value = "gamertag", required = false) String gamertag,
                                              @RequestParam(value = "formulaOne", required = false) Boolean formulaOne,
                                              @RequestParam(value = "fifa", required = false) Boolean fifa,
                                              @RequestParam(value = "valorant", required = false) Boolean valorant,
                                              @RequestParam(value = "teamPlayer", required = false) Boolean teamPlayer,
                                              @RequestParam(value = "soloPlayer", required = false) Boolean soloPlayer,
                                              @RequestParam(value = "playerTwo", required = false) String playerTwo,
                                              @RequestParam(value = "playerThree", required = false) String playerThree,
                                              @RequestParam(value = "playerFour", required = false) String playerFour,
                                              @RequestParam(value = "playerFive", required = false) String playerFive,
                                              @RequestParam(value = "teamName", required = false) String teamName)

    {

        if(visitorRepository.findById(id).isPresent()) {
            Visitor v = visitorRepository.findById(id).get();
            v.setA_name(name);
            v.setB_email(email);
            v.setC_player(player);
            v.setD_viewer(viewer);
            v.setE_gamertag(gamertag);
            v.setG_valorant(valorant);
            v.setH_fifa(fifa);
            v.setF_formulaOne(formulaOne);
            v.setI_soloPlayer(soloPlayer);
            v.setJ_teamPlayer(teamPlayer);
            v.setPlayerTwo(playerTwo);
            v.setPlayerThree(playerThree);
            v.setPlayerFour(playerFour);
            v.setPlayerFive(playerFive);
            v.setK_teamName(teamName);
            visitorRepository.save(v);
            return "Visitor updated";
        } else {
            return "Visitor not found";
        }
    }

}

